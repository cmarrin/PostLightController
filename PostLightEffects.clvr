/*-------------------------------------------------------------------------
    This source file is a part of Clover
    For the latest info, see https://github.com/cmarrin/Clover
    Copyright (c) 2021-2024, Chris Marrin
    All rights reserved.
    Use of this source code is governed by the MIT license that can be
    found in the LICENSE file.
-------------------------------------------------------------------------*/

// Clover script for different Post Light Controller effects
//
// Current effects:
//
//      'm' - Multicolor: rotate between 4 passed color at passed rate
//              Args:   0..2       Color 1
//                      3..5       Color 2
//                      6..8       Color 3
//                      9..11      Color 4
//                      12         Speed between cross fades in 1 second intervals (0-255)
//
//      'p' - Pulse: Single color pulses dim and bright at passed speed
//              Args:   0, 1, 2     Color
//                      3           Speed (0-7)
//
//      'f' - Flicker: Single color flickers randomly at passed speed
//              Args:   0, 1, 2     Color
//                      3           Speed (0-7)
//
//      'r' - Rainbow: cycle colors through part of entire rainbow at passed speed
//              Args:   0, 1, 2     Color
//                      3           Speed of color change (0-15)
//                      4           Range how far from passed color to change.
//                                  0 - small change, 7 - full range
//                                  0-6 colors bounce back and forth, 7 colors loop around

struct PostLightEffects
{

// This is an id which will call an installed function. The value must agree with the runtime
const uint16_t SetLight = 1;
const uint16_t SetLights = 2;
const uint16_t Show = 2;

const uint8_t PixelsPerPost   = 8;
const uint8_t NumPosts        = 7;

const int16_t Delay           = 25; // Delay between calls to loop (in ms)

// Animation values are 16 bit integers, representing a fixed point
// number, with 9 bits representing the signed integer part and 7 
// bits for the fraction. So numbers can be +/- 255 with 2 digits 
// of decimal precision. To get a brightness value from 'cur' you 
// simply shift right 7 places or divide by 128.
//
struct LedEntry
{
    int16_t cur;
    int16_t inc;
    int16_t min;
    int16_t max;
};

struct Color
{
    uint8_t h;
    uint8_t s;
    uint8_t v;

    Color(uint8_t hue, uint8_t sat, uint8_t val) { h = hue; s = sat; v = val; }
};

uint8_t speed;
uint8_t range;

Color colors[4];

// Flicker need allLedEntries because all leds on all posts flicker independently.
// So the first PixelsPerPost entries are for the first post, the next entries
// are for the second post and so on. But all the other modes just need one
// LedEntry per post. So only the first NumPosts entries are used
//
LedEntry leds[PixelsPerPost * NumPosts];

function int16_t animate(LedEntry led)
{
    // Watch for overflow
    if (led.inc > 0) {
        if (led.cur >= led.max - led.inc) {
            led.inc = -led.inc;
            led.cur = led.max;
            return 1;
        }
    } else {
        if (led.cur <= led.min - led.inc) {
            led.inc = -led.inc;
            led.cur = led.min;
            return -1;
        }
    }

    led.cur += led.inc;
    return 0;
}

function setAllLights(uint16_t post, Color color)
{
    core.userCall(SetLights, post * PixelsPerPost, PixelsPerPost, color);
}

function loadColorArg(Color color)
{
    color.h = core.argint8();
    color.s = core.argint8();
    color.v = core.argint8();
}

// Effects take one or more colors and possibly other args
// Colors are hue, saturation, brightness (uint8_t). 0 is
// 0%, 255 is 100%.

// Multicolor - pass 4 colors and cross fade between them
//
// Args:  0..2       Color 1
//        3..5       Color 2
//        6..8       Color 3
//        9..11      Color 4
//        12         Duration between cross fades in 1 second intervals (0-255)
//
int16_t multiColorDurationCur[NumPosts];
uint8_t multiColorIndex[NumPosts];
bool multiColorIsCrossfading[NumPosts];

const int16_t FadeInc         = 5;

function initFade(uint8_t post, uint8_t c, bool fadeIn)
{
    LedEntry* led = &leds[post];

    led.min = 0.0;
    led.max = int16_t(colors[c].v) * 128;
    led.cur = 0.0;
    led.inc = FadeInc * 128;

    if (!fadeIn) {
        led.cur = led.max;
        led.inc = -led.inc;
    }
}

function multicolorInit(uint8_t post)
{
    // Add randomness to duration so the posts don't stay in sync (careful about 16 bit range)
    multiColorDurationCur[post] = uint16_t(speed + 4 + core.irand(-3, 3)) * (1000 / Delay);
    
    // Start on a random color
    multiColorIndex[post] = core.irand(0, 4);

    // Start by fading in the first color
    initFade(post, multiColorIndex[post], true);

    multiColorIsCrossfading[post] = true;
}

function int16_t multicolorLoop(uint8_t post)
{
    LedEntry* led = &leds[post];

    if (multiColorIsCrossfading[post]) {
        int8_t animateResult = animate(led);
        if (animateResult < 0) {
            // The current light has faded out
            // Restore the Val of the current color
            colors[multiColorIndex[post]].v = led.max / 128;

            if (++multiColorIndex[post] >= 4) {
                multiColorIndex[post] = 0;
            }

            initFade(post, multiColorIndex[post], true);
        } else if (animateResult > 0) {
            // The new light has completed fading in
            multiColorIsCrossfading[post] = false;
        }

        Color color(colors[multiColorIndex[post]].h, colors[multiColorIndex[post]].s, led.cur / 128);
        setAllLights(post, color);
        
        return Delay;
    }

    if (--multiColorDurationCur[post] > 0) {
        return Delay;
    }

    // We've hit the desired duration, transition
    multiColorIsCrossfading[post] = true;
    
    // Add randomness to duration so the posts don't stay in sync (careful about 16 bit range)
    multiColorDurationCur[post] = uint16_t(speed + 4 + core.irand(-3, 3)) * (1000 / Delay);
    return Delay;
}

//
// Pulse effect
//
// Args:    0, 1, 2     Color
//          3           Speed
//          4           Duration
//
const int8_t PulseMin         = 38;
const int16_t NumLevels       = 8;
const int16_t PulseSpeedMult  = 35;

function pulseInit(uint8_t post)
{
    LedEntry* led = &leds[post];

    if (speed > 7) {
        speed = 7;
    }
    
    // min is from PulseMin which is the level at which the light is dim
    // but not off and doesn't flicker from being too dim.
    led.min = int16_t(PulseMin) * 128;
    led.max = int16_t(colors[0].v) * 128;
    
    // max is based on the color brightness, but it can't be dimmer than
    // the min value. If it is, brighten it up a bit
    if (led.max <= led.min) {
        led.max += led.min / 2;
    }
    
    // set the duration
    led.inc = (led.max - led.min) / ((NumLevels - speed) * PulseSpeedMult);
    
    // Start with a random value for cur
    led.cur = core.irand(led.min, led.max);
}

function int16_t pulseLoop(uint8_t post)
{
    LedEntry* led = &leds[post];

    animate(led);

    Color color(colors[0].h, colors[0].s, led.cur / 128);
    setAllLights(post, color);
    return Delay;
}

//
// Flicker effect
//
// Args:    0, 1, 2     Color
//          3           Speed (0-7)
//
// Flicker inc value. This is a random value based on speed.
// Speed goes from 0-7 for flicker. Min and max values are
// from 0 to 255 multiplied by 128. so a typical range is
// 15000. If we want to animate 15000 values in 1 second
// at 25ms per cycle, the inc value would be 375. A slow
// animation would be around 5 seconds (inc = 2000). A fast
// animation would be around 1/2 second (inc = 200).
// These table entries are /128 (so they fit in a byte)
// so they should go from a slow of 1 to a fast of 16
//
struct FlickerSpeedEntry
{
    uint8_t min;
    uint8_t max;
};

const FlickerSpeedEntry FlickerSpeedTable[ ] =
{
    1, 2,
    2, 3,
    3, 4,
    4, 6,
    6, 8,
    8, 10,
    10, 13,
    13, 16,
};

const int8_t FlickerMin       = 38;

// This is range of max values for flicker.
const int8_t FlickerBrightestMin = 77;
const int8_t FlickerBrightestMax = 255;


function flickerInit(uint8_t post)
{
    if (speed > 7) {
        speed = 7;
    }
    
    core.memset(&leds[post], 0, PixelsPerPost * 4 * 2);
}

function int16_t flickerLoop(uint8_t post)
{
    LedEntry* led;
    uint16_t basePixel = post * PixelsPerPost;
    
    for (uint16_t i = 0; i < PixelsPerPost; ++i) {
        led = &leds[basePixel + i];
        if (animate(led) == -1) {
            // We are done with the throb. We always start at BrightnessMin.
            // Select a new inc (how fast it pulses), and  max (how bright it
            // gets) based on the speed value.
            led.cur = int16_t(FlickerMin) * 128;
            led.min = led.cur;
            
            // Set the inc to a random value from the table
            led.inc = int16_t(core.irand(FlickerSpeedTable[speed].min, FlickerSpeedTable[speed].max)) * 128;
            
            // set the max brightness for flicker
            led.max = core.irand(FlickerBrightestMin, FlickerBrightestMax) * 128;
        }

        Color color(colors[0].h, colors[0].s, led.cur / 128);
        core.userCall(SetLight, basePixel + i, color);
    }
    
    return Delay;
}

//
// Rainbow Effect
//
//              Args:   0, 1, 2     Color
//                      3           Speed of color change (0-15)
//                      4           Range how far from passed color to change.
//                                  0 - small change, 7 - full range
//                                  0-6 colors bounce back and forth, 7 colors loop around
//
const int16_t MaxColorComp     = 32768; // This is the component value that equals 1.0
const int16_t RainbowSpeedMult = 15;

function rainbowInit(uint8_t post)
{
    LedEntry* led = &leds[post];

    if (speed > 15) {
        speed = 15;
    }
    
    // Go from starting hue (min) to a color with
    // a greater value of hue. A range of 0 is a
    // small change, 6 is the largest change, 7
    // ignores the starting hue and goes full
    // range from 0 to 1.
    if (range < 7) {
        led.min = int16_t(colors[0].h) * 128;
        led.max = led.min + (MaxColorComp - led.min) / (8 - range);
    } else {
        led.min = 0;
        led.max = MaxColorComp;
    }
    
    led.inc = int16_t(speed + 1) * RainbowSpeedMult;

    // Start with a random value for cur
    led.cur = core.irand(led.min, led.max);
}

function int16_t rainbowLoop(uint8_t post)
{
    LedEntry* led = &leds[post];

    animate(led);

    Color color(led.cur / 128, colors[0].s, colors[0].v);
    setAllLights(post, color);

    return Delay;
}

uint8_t _cmd = 'f';

PostLightEffects()
{
    core.initArgs();
    _cmd = core.argint8();
    
    // Init each cmd
	loadColorArg(colors[0]);
 
    if (_cmd == 'm') {
        loadColorArg(colors[1]);
        loadColorArg(colors[2]);
        loadColorArg(colors[3]);
    }
    
    speed = core.argint8();
    
    if (_cmd == 'r') {
        range = core.argint8();
        if (range > 7) {
            range = 7;
        }
    }
    
    for (uint8_t i = 0; i < NumPosts; ++i) {
        switch(_cmd) {
            case 'm': multicolorInit(i);
            case 'p': pulseInit(i);
            case 'f': flickerInit(i);
            case 'r': rainbowInit(i);
        }
    }
}

function int16_t main()
{
    int16_t result = 0;
    
    for (uint8_t i = 0; i < NumPosts; ++i) {
        switch (_cmd) {
            case 'm': result = multicolorLoop(i);
            case 'p': result = pulseLoop(i);
            case 'f': result = flickerLoop(i);
            case 'r': result = rainbowLoop(i);
        }
        
        if (result <= 0) {
            return result;
        }
    }
    
    return result;
}

};
