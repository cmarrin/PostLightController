/*-------------------------------------------------------------------------
    This source file is a part of Clover
    For the latest info, see https://github.com/cmarrin/Clover
    Copyright (c) 2021-2024, Chris Marrin
    All rights reserved.
    Use of this source code is governed by the MIT license that can be
    found in the LICENSE file.
-------------------------------------------------------------------------*/

// Clover script for different Post Light Controller effects
//
// Current effects:
//
//      'm' - Multicolor: rotate between 4 passed color at passed rate
//              Args:   0..2       Color 1
//                      3..5       Color 2
//                      6..8       Color 3
//                      9..11      Color 4
//                      12         Speed between cross fades in 1 second intervals (0-255)
//
//      'p' - Pulse: Single color pulses dim and bright at passed speed
//              Args:   0, 1, 2     Color
//                      3           Speed (0-7)
//
//      'f' - Flicker: Single color flickers randomly at passed speed
//              Args:   0, 1, 2     Color
//                      3           Speed (0-7)
//
//      'r' - Rainbow: cycle colors through part of entire rainbow at passed speed
//              Args:   0, 1, 2     Color
//                      3           Speed of color change (0-15)
//                      4           Range how far from passed color to change.
//                                  0 - small change, 7 - full range
//                                  0-6 colors bounce back and forth, 7 colors loop around

struct PostLightEffects
{

struct FlickerSpeedEntry
{
    uint8_t min;
    uint8_t max;
};

// Animation values are 16 bit integers, representing a fixed point
// number, with 9 bits representing the signed integer part and 7 
// bits for the fraction. So numbers can be +/- 255 with 2 digits 
// of decimal precision. To get a brightness value from 'cur' you 
// simply shift right 7 places or divide by 128.

struct LedEntry
{
    int16_t cur;
    int16_t inc;
    int16_t min;
    int16_t max;
};

struct Color
{
    uint8_t h;
    uint8_t s;
    uint8_t v;
};

const int16_t MaxColorComp    = 32768; // This is the component value that equals 1.0
const int16_t FadeInc         = 5;
const int8_t PulseMin         = 38;
const int8_t FlickerMin       = 38;
const uint8_t NumLights       = 8;
const int16_t NumLevels       = 8;
const int16_t Delay           = 25; // in ms
const int16_t PulseSpeedMult  = 35;
const int16_t RainbowSpeedMult= 15;

// This is range of max values for flicker.
const int8_t FlickerBrightestMin = 77;
const int8_t FlickerBrightestMax = 255;

// Flicker inc value. This is a random value based on speed.
// Speed goes from 0-7 for flicker. Min and max values are
// from 0 to 255 multiplied by 128. so a typical range is
// 15000. If we want to animate 15000 values in 1 second
// at 25ms per cycle, the inc value would be 375. A slow
// animation would be around 5 seconds (inc = 2000). A fast
// animation would be around 1/2 second (inc = 200).
// These table entries are /128 (so they fit in a byte)
// so they should go from a slow of 1 to a fast of 16
const FlickerSpeedEntry FlickerSpeedTable[ ] =
{
    1, 2,
    2, 3,
    3, 4,
    4, 6,
    6, 8,
    8, 10,
    10, 13,
    13, 16,
};

LedEntry* led;

int16_t flickerStepsMin;
int16_t flickerStepsMax;
uint16_t multiColorDurationMax; // Number of counts between fade (based on Delay)
uint16_t multiColorDurationCur;
uint8_t multiColorIndex;
bool multiColorIsCrossfading;

uint8_t speed;
uint8_t range;

Color colors[4];
LedEntry leds[8];

function int16_t animate(LedEntry led)
{
    led.cur += led.inc;
    if (led.inc > 0) {
        if (led.cur >= led.max) {
            led.inc = -led.inc;
            led.cur = led.max;
            return 1;
        }
    } else {
        if (led.cur <= led.min) {
            led.inc = -led.inc;
            led.cur = led.min;
            return -1;
        }
    }
    return 0;
}

function initFade(uint8_t c, bool fadeIn)
{
    led.min = 0.0;
    led.max = colors[c].v;
    led.cur = 0.0;
    led.inc = FadeInc;

    if (!fadeIn) {
        led.cur = led.max;
        led.inc = -led.inc;
    }
}

function setAllLights(uint8_t colorIndex)
{
    Color* color = &colors[colorIndex];
    for (uint8_t i = 0; i < NumLights; ++i) {
        clr.setLight(i, color);
    }
}

function loadColorArg(Color color)
{
    color.h = core.argint8();
    color.s = core.argint8();
    color.v = core.argint8();
}

function init(uint8_t cmd)
{
	loadColorArg(colors[0]);
 
    if (cmd == 'm') {
        loadColorArg(colors[1]);
        loadColorArg(colors[2]);
        loadColorArg(colors[3]);
    }
    
    speed = core.argint8();
    
    if (cmd == 'r') {
        range = core.argint8();
        if (range > 7) {
            range = 7;
        }
    }
    
    led = &leds[0];
    
    if (cmd == 'm') {
        multiColorDurationMax = uint16_t(speed) * 1000 / Delay;
        
        // Start on a random color
        multiColorIndex = core.irand(0, 4);

        // Start by fading in the first color
        initFade(multiColorIndex, true);

        multiColorIsCrossfading = true;

        // Start at a random place in the delay
        multiColorDurationCur = core.irand(0, multiColorDurationMax);
        
        return;
    }
    
    if (cmd == 'p') {
        if (speed > 7) {
            speed = 7;
        }
        
        // min is from PulseMin which is the level at which the light is dim
        // but not off and doesn't flicker from being too dim.
        led.min = int16_t(PulseMin) * 128;
        led.max = int16_t(colors[0].v) * 128;
        
        // max is based on the color brightness, but it can't be dimmer than
        // the min value. If it is, brighten it up a bit
        if (led.max <= led.min) {
            led.max += led.min / 2;
        }
        
        // set the duration
        led.inc = (led.max - led.min) / ((NumLevels - speed) * PulseSpeedMult);
        
        // Start with a random value for cur
        led.cur = core.irand(led.min, led.max);

        return;
    }
    
    if (cmd == 'f') {
        if (speed > 7) {
            speed = 7;
        }
        
        core.memset(&leds, 0, NumLights * 4 * 2);
//core.printf("led.min=%d, led.max=%d, led.inc=%d, led.cur=%d\n", led.min, led.max, led.inc, led.cur);
        return;
    }
    
    if (cmd == 'r') {
        if (speed > 15) {
            speed = 15;
        }
        
        // Go from starting hue (min) to a color with
        // a greater value of hue. A range of 0 is a
        // small change, 6 is the largest change, 7
        // ignores the starting hue and goes full
        // range from 0 to 1.
        if (range < 7) {
            led.min = int16_t(colors[0].h) * 128;
            led.max = led.min + (MaxColorComp - led.min) / (8 - range);
        } else {
            led.min = 0;
            led.max = MaxColorComp;
        }
        
        led.inc = int16_t(speed + 1) * RainbowSpeedMult;

        // Start with a random value for cur
        led.cur = core.irand(led.min, led.max);

        return;
    }
}

// Effects take one or more colors and possibly other args
// Colors are hue, saturation, brightness (uint8_t). 0 is
// 0%, 255 is 100%.

// Multicolor - pass 4 colors and cross fade between them
//
// Args:  0..2       Color 1
//        3..5       Color 2
//        6..8       Color 3
//        9..11      Color 4
//        12         Duration between cross fades in 1 second intervals (0-255)

function int16_t multicolorLoop()
{
    if (multiColorIsCrossfading) {
        int8_t animateResult = animate(led);
        if (animateResult < 0) {
            // The current light has faded out
            // Restore the Val of the current color
            colors[multiColorIndex].v = led.max;

            if (++multiColorIndex >= 4) {
                multiColorIndex = 0;
            }

            initFade(multiColorIndex, true);
        } else if (animateResult > 0) {
            // The new light has completed fading in
            multiColorIsCrossfading = false;
            if (multiColorDurationCur >= multiColorDurationMax) {
                multiColorDurationCur = 0;
            }
        }

        colors[multiColorIndex].v = led.cur;
        setAllLights(multiColorIndex);
        return Delay;
    }

    if (++multiColorDurationCur < multiColorDurationMax) {
        return Delay;
    }

    // We've hit the desired duration, transition
    multiColorIsCrossfading = true;
    
    // Add random amount to duration
    multiColorDurationMax = ((uint16_t(speed) * 1000) + core.irand(-1, 1)) / Delay;
    multiColorDurationCur = 0;
    return Delay;
}

//
// Pulse effect
//
// Args:    0, 1, 2     Color
//          3           Speed
//          4           Duration
//
function int16_t pulseLoop()
{
    animate(led);

    colors[0].v = led.cur / 128;
    setAllLights(0);
    return Delay;
}

//
// Flicker effect
//
// Args:    0, 1, 2     Color
//          3           Speed (0-7)
//
function int16_t flickerLoop()
{
    for (uint8_t i = 0; i < NumLights; ++i) {
        led = &leds[i];
        if (animate(led) == -1) {
            // We are done with the throb. We always start at BrightnessMin.
            // Select a new inc (how fast it pulses), and  max (how bright it
            // gets) based on the speed value.
            led.cur = int16_t(FlickerMin) * 128;
            led.min = led.cur;
            
            // Set the inc to a random value from the table
            led.inc = int16_t(core.irand(FlickerSpeedTable[speed].min, FlickerSpeedTable[speed].max)) * 128;
            
            // set the max brightness for flicker
            led.max = core.irand(FlickerBrightestMin, FlickerBrightestMax) * 128;
        }

//core.printf("[%d] led.min=%d, led.max=%d, led.inc=%d, led.cur=%d\n", i, led.min, led.max, led.inc, led.cur);
        colors[0].v = led.cur / 128;
        clr.setLight(i, colors[0]);
    }
    
    return Delay;
}

//
// Rainbow Effect
//
//              Args:   0, 1, 2     Color
//                      3           Speed of color change (0-15)
//                      4           Range how far from passed color to change.
//                                  0 - small change, 7 - full range
//                                  0-6 colors bounce back and forth, 7 colors loop around

function int16_t rainbowLoop()
{
    animate(led);

    colors[0].h = led.cur / 128;
    setAllLights(0);
    return Delay;
}

uint8_t _cmd = 'f';

PostLightEffects()
{
    core.initArgs();
    _cmd = core.argint8();
    init(_cmd);
}

function int16_t main()
{
    switch (_cmd) {
        case 'm': return multicolorLoop();
        case 'p': return pulseLoop();
        case 'f': return flickerLoop();
        case 'r': return rainbowLoop();
    }
    
    return 0;
}

};
