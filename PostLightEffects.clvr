/*-------------------------------------------------------------------------
    This source file is a part of Clover
    For the latest info, see https://github.com/cmarrin/Clover
    Copyright (c) 2021-2022, Chris Marrin
    All rights reserved.
    Use of this source code is governed by the MIT license that can be
    found in the LICENSE file.
-------------------------------------------------------------------------*/

// Clover script for different Post Light Controller effects
//

struct FlickerSpeedEntry
{
    float min;
    float max;
    int delay;
}

struct LedEntry
{
    float cur;
    float inc;
    float min;
    float max;
}

const float IncMin          0.004;
const float IncMax          0.04;
const float BrightnessMin   0.3;
const int NumPixels         8;
const int NumLevels         8;
const int Delay             25; // in ms
const int PulseSpeedMult    35;
const int RainbowSpeedMult  300;

table FlickerSpeedEntry FlickerSpeedTable
{
    0.98 1.0  40
    0.98 1.0  30
    0.71 0.94 20
    0.59 0.78 20
    0.27 0.47 20
    0.08 0.31 20
    0.03 0.16 10
    0.01 0.02 10
}

LedEntry leds[8];
LedEntry* led;
float flickerStepsMin;
float flickerStepsMax;
int loopDelay;
int durationMax; // Number of counts between fade (based on Delay)
int durationCur;
int multiColorIndex;
int isCrossfading;

//
// Constant effect
//

function constantInit()
{
	LoadColorParam(0, 0, 1);
}

function int constantLoop()
{
	SetAllLights(0);
    return 20;
}

command c 3 constantInit constantLoop;

// Multicolor - pass 4 colors and cross fade between them
//
// Params:  0..2       Color 1
//          3..5       Color 2
//          6..8       Color 3
//          9..11      Color 4
//          12         Duration between cross fades in 1 second intervals (0-255)

function initFade(int c, int fadeIn)
{
    led.min = 0.0;
    led.max = LoadColorComp(c, 2);
    led.cur = 0.0;
    led.inc = IncMax;

    if (!fadeIn) {
        led.cur = led.max;
        led.inc = -led.inc;
    }
}

function multicolorInit()
{
    LoadColorParam(0, 0, 4);

    durationMax = Param(12) * 1000 / Delay;
    led = &leds[0];

    // Start on a random color
    multiColorIndex = RandomInt(0, 4);

    // Start by fading in the first color
    initFade(multiColorIndex, 1);

    isCrossfading = 1;

    // Start at a random place in the delay
    durationCur = RandomInt(0, durationMax);
}

function int multicolorLoop()
{
    if (isCrossfading) {
        int animateResult = Animate(led);
        if (animateResult < 0) {
            // The current light has faded out
            // Restore the Val of the current color
            StoreColorComp(multiColorIndex, 2, led.max);

            if (++multiColorIndex >= 4) {
                multiColorIndex = 0;
            }

            initFade(multiColorIndex, 1);
        } else if (animateResult > 0) {
            // The new light has completed fading in
            isCrossfading = 0;
            if (durationCur >= durationMax) {
                durationCur = 0;
            }
        }

        StoreColorComp(multiColorIndex, 2, led.cur);
        SetAllLights(multiColorIndex);
        return Delay;
    }

    if (++durationCur < durationMax) {
        return Delay;
    }

    // We've hit the desired duration, transition
    isCrossfading = 1;
    return Delay;
}

command m 13 multicolorInit multicolorLoop;

//
// Pulse effect
//
function pulseInit()
{
	LoadColorParam(0, 0, 1);
	
    led = &leds[0];
    
    led.max = LoadColorComp(0, 2);
    led.min = led.max - (Float(Param(4) + 1) / 8.0 * (led.max - BrightnessMin));
    led.inc = (led.max - led.min) / Float((NumLevels - Param(3)) * PulseSpeedMult);

    // Start with a random value for cur
    led.cur = RandomFloat(led.min, led.max);
}

function int pulseLoop()
{
    Animate(&leds[0]);

    led = &leds[0];
    StoreColorComp(0, 2, led.cur);
    SetAllLights(0);
    return Delay;
}

command p 5 pulseInit pulseLoop;

//
// Flicker effect
//
function flickerInit()
{
	LoadColorParam(0, 0, 1);
    InitArray(&leds, 0, NumPixels * 4);

    int speed = Param(3);
    flickerStepsMin = FlickerSpeedTable[speed].min;
    flickerStepsMax = FlickerSpeedTable[speed].max;
    loopDelay = FlickerSpeedTable[speed].delay;
}

function int flickerLoop()
{
    int i = 0;
    foreach (i : NumPixels) {
        led = &leds[i];
        if (Animate(led) == -1) {
            // We are done with the throb, select a new inc and lim
            // Increment inc value for each step a random amount
            led.cur = BrightnessMin;
            led.inc = RandomFloat(IncMin, IncMax);
        
            // Random number of steps to throb up and down
            led.min = BrightnessMin;
            led.max = led.inc + RandomFloat(flickerStepsMin, flickerStepsMax);
        }

        StoreColorComp(0, 2, led.cur);
        SetLight(i, 0);
    }
    
    return loopDelay;
}

command f 4 flickerInit flickerLoop;

//
// Rainbow Effect
//
//      color, speed, range, mode       Change color through the rainbow by changing hue 
//                                      from the passed color at the passed speed (0-15). Range
//										is how far from the passed color to go, 0 (very little)
//										to 7 (full range). If mode is 0 colors bounce 
//										back and forth between start color through range. If
//										it is 1 colors cycle the full color spectrum and
//										range is ignored.

function rainbowInit()
{
	LoadColorParam(0, 0, 1);

    led = &leds[0];
    
    led.min = LoadColorComp(0, 0);
    
    float range = 1.0 - led.min;
    float r = Float(Param(4) + 1) / 8;
    if (r > 1) {
        r = 1;
    }
    led.max = led.min + range * r;
    
    int speed = 16 - Param(3);
    if (speed < 1 || speed > 16) {
        speed = 16;
    }
    speed *= RainbowSpeedMult;
log("***** speed=%i\n", speed);
    led.inc = (led.max - led.min) / Float(speed);

    // Start with a random value for cur
    led.cur = RandomFloat(led.min, led.max);
}

function int rainbowLoop()
{
    Animate(led);

    StoreColorComp(0, 0, led.cur);
    SetAllLights(0);
    return Delay;
}

command r 6 rainbowInit rainbowLoop;

