/*-------------------------------------------------------------------------
    This source file is a part of Clover
    For the latest info, see https://github.com/cmarrin/Clover
    Copyright (c) 2021-2022, Chris Marrin
    All rights reserved.
    Use of this source code is governed by the MIT license that can be
    found in the LICENSE file.
-------------------------------------------------------------------------*/

// Clover script for different Post Light Controller effects
//

struct FlickerSpeedEntry
{
    float min;
    float max;
}

struct LedEntry
{
    float cur;
    float inc;
    float min;
    float max;
}

const float FadeInc         0.04;
const float PulseMin        0.3;
const float BrightestMin    0.6;
const float BrightestMax    1.0;
const float FlickerMin      0.2;
const int NumPixels         8;
const int NumLevels         8;
const int Delay             25; // in ms
const int PulseSpeedMult    35;
const int RainbowSpeedMult  300;

table FlickerSpeedEntry FlickerSpeedTable
{
    0.004 0.008
    0.008 0.016
    0.016 0.024
    0.024 0.032
    0.032 0.040
    0.040 0.048
    0.048 0.056
    0.056 0.064
}

LedEntry leds[8];
LedEntry* led;
float flickerStepsMin;
float flickerStepsMax;
int durationMax; // Number of counts between fade (based on Delay)
int durationCur;
int multiColorIndex;
int isCrossfading;
float brightnessMod;

//
// Constant effect
//

function constantInit()
{
	LoadColorParam(0, 0, 1);
}

function int constantLoop()
{
	SetAllLights(0);
    return Delay;
}

command c 3 constantInit constantLoop;

// Multicolor - pass 4 colors and cross fade between them
//
// Params:  0..2       Color 1
//          3..5       Color 2
//          6..8       Color 3
//          9..11      Color 4
//          12         Duration between cross fades in 1 second intervals (0-255)

function initFade(int c, int fadeIn)
{
    led.min = 0.0;
    led.max = LoadColorComp(c, 2);
    led.cur = 0.0;
    led.inc = FadeInc;

    if (!fadeIn) {
        led.cur = led.max;
        led.inc = -led.inc;
    }
}

function multicolorInit()
{
    LoadColorParam(0, 0, 4);

    durationMax = Param(12) * 1000 / Delay;
    
    led = &leds[0];

    // Start on a random color
    multiColorIndex = RandomInt(0, 4);

    // Start by fading in the first color
    initFade(multiColorIndex, 1);

    isCrossfading = 1;

    // Start at a random place in the delay
    durationCur = RandomInt(0, durationMax);
}

function int multicolorLoop()
{
    if (isCrossfading) {
        int animateResult = Animate(led);
        if (animateResult < 0) {
            // The current light has faded out
            // Restore the Val of the current color
            StoreColorComp(multiColorIndex, 2, led.max);

            if (++multiColorIndex >= 4) {
                multiColorIndex = 0;
            }

            initFade(multiColorIndex, 1);
        } else if (animateResult > 0) {
            // The new light has completed fading in
            isCrossfading = 0;
            if (durationCur >= durationMax) {
                durationCur = 0;
            }
        }

        StoreColorComp(multiColorIndex, 2, led.cur);
        SetAllLights(multiColorIndex);
        return Delay;
    }

    if (++durationCur < durationMax) {
        return Delay;
    }

    // We've hit the desired duration, transition
    isCrossfading = 1;
    
    // Add random amount to duration
    durationMax = Int(Float(Param(12) * 1000) * RandomFloat(1, 1.5)) / Delay;

    return Delay;
}

command m 13 multicolorInit multicolorLoop;

//
// Pulse effect
//
function pulseInit()
{
	LoadColorParam(0, 0, 1);
	
    led = &leds[0];
    
    led.max = LoadColorComp(0, 2);
    led.min = led.max - (Float(Param(4) + 1) / 8.0 * (led.max - PulseMin));
    
    // add some randomization to the duration
    led.inc = (led.max - led.min) / (Float((NumLevels - Param(3)) * PulseSpeedMult) * RandomFloat(1, 2));

    // Start with a random value for cur
    led.cur = RandomFloat(led.min, led.max);
}

function int pulseLoop()
{
    Animate(&leds[0]);

    led = &leds[0];
    StoreColorComp(0, 2, led.cur);
    SetAllLights(0);
    return Delay;
}

command p 5 pulseInit pulseLoop;

//
// Flicker effect
//
// Pass HSV color and a speed value (0-7).
// Speed indexes into a table with a min, max and delay value.
// 
//
function flickerInit()
{
	LoadColorParam(0, 0, 1);
    InitArray(&leds, 0, NumPixels * 4);

    int speed = Param(3);
    flickerStepsMin = FlickerSpeedTable[speed].min;
    flickerStepsMax = FlickerSpeedTable[speed].max;
    
    // Modify the brightness to make it between 0.5 and 1.0
    brightnessMod = LoadColorComp(0, 2) / 2.0 + 0.5;
}

function int flickerLoop()
{
    int i;
    for (i = 0; i < NumPixels; ++i) {
        led = &leds[i];
        if (Animate(led) == -1) {
            // We are done with the throb. We always start at BrightnessMin.
            // Select a new inc (how fast it pulses), and  max (how bright it
            // gets) based on the speed value.
            led.cur = FlickerMin;
            led.min = FlickerMin;
            
            led.inc = RandomFloat(flickerStepsMin, flickerStepsMax);
            
            // Adjust max by brightness
            led.max = RandomFloat(BrightestMin, BrightestMax);
log("***** brightness before=%f\n", led.max);
            led.max  *= brightnessMod;
log("***** brightness mod=%f\n", brightnessMod);
        }

        StoreColorComp(0, 2, led.cur);
        SetLight(i, 0);
    }
    
    return Delay;
}

command f 4 flickerInit flickerLoop;

//
// Rainbow Effect
//
//      color, speed, range, mode       Change color through the rainbow by changing hue 
//                                      from the passed color at the passed speed (0-15). Range
//										is how far from the passed color to go, 0 (very little)
//										to 7 (full range). If mode is 0 colors bounce 
//										back and forth between start color through range. If
//										it is 1 colors cycle the full color spectrum and
//										range is ignored.

function rainbowInit()
{
	LoadColorParam(0, 0, 1);

    led = &leds[0];
    
    led.min = LoadColorComp(0, 0);
    
    float range = 1.0 - led.min;
    float r = Float(Param(4) + 1) / 8;
    if (r > 1) {
        r = 1;
    }
    led.max = led.min + range * r;
    
    int speed = 16 - Param(3);
    if (speed < 1 || speed > 16) {
        speed = 16;
    }
    speed *= RainbowSpeedMult;
    led.inc = (led.max - led.min) / Float(speed);

    // Start with a random value for cur
    led.cur = RandomFloat(led.min, led.max);
}

function int rainbowLoop()
{
    Animate(led);

    StoreColorComp(0, 0, led.cur);
    SetAllLights(0);
    return Delay;
}

command r 6 rainbowInit rainbowLoop;

