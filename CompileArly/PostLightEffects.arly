// Arly script for different Post Light Controller effects
//

// Total 234 bytes

// 20 bytes
const float IncMin          0.004
const float IncMax          0.04
const float BrightnessMin   0.3
const int LedSize           24
const int NumPixels         8
const int NumLevels         8
const int PulseDelay        25
const int PulseSpeedMult    35

table float FlickerSpeedTable
    0.98 1    40
    0.98 1    30
    0.71 0.94 20
    0.59 0.78 20
    0.27 0.47 20
    0.08 0.31 20
    0.03 0.16 10
    0.01 0.02 10
end

// r0 contains index of structure: cur, inc, min, max
// Animate cur between min and max but adding inc
// Return:  r0 = integer 1 if we just reversed into the positive
//          direction, 0 otherwise
function animate
    Move r3 r0
    
    // r3 has base index
    // r2 has cur
    
    // cur += inc
    LoadIX r0 r3 0
    LoadIX r1 r3 1
    AddFloat
    StoreIX r3 0 r0
    Move r2 r0
    
    // if (0 <= inc)
    LoadZero r0
    LEFloat
    if
        // if cur > max
        Move r0 r2
        LoadIX r1 r3 3
        GTFloat
        if
            // Reverse direction
            StoreIX r3 0 r1
            LoadIX r0 r3 1
            NegFloat
            StoreIX r3 1 r0
        end
    else
        // if (cur < min)
        Move r0 r2
        LoadIX r1 r3 2
        LTFloat
        if
            // Reverse direction
            StoreIX r3 0 r1
            LoadIX r0 r3 1
            NegFloat
            StoreIX r3 1 r0
            LoadIntConst r0 1
            Return
        end
    end
    LoadZero r0
    Return
end

// Constant Color (4 bytes)
effect c 3
    init
        LoadColorParam c0 0
    end
        
    loop
        SetAllLights c0
        LoadZero r0
        Exit r0
    end
end

// Flicker (114 bytes)
effect f 4
    float leds 32       // cur, inc, min, max
    float stepsMin 1
    float stepsMax 1
    int speedDelay 1
    
    init
        // Get color param
        LoadColorParam c0 0
        
        // Init leds
        LoadZero r0
        Load r1 LedSize
        Init leds
        
        // Init min, max and delay from SpeedTable
        LoadIntParam r0 3
        LoadIntConst r1 3
        MulInt
        LoadI r1 FlickerSpeedTable r0 0
        Store stepsMin r1
        LoadI r1 FlickerSpeedTable r0 1
        Store stepsMax r1
        LoadI r1 FlickerSpeedTable r0 2
        ToInt r1
        Store speedDelay r1
    end
    
    loop
        LoadZero r2
        Load r0 NumPixels
        
        // for (i = 0; i < NumPixels; ++i)
        foreach r2
			// r3 holds the index of the current LED (r2 * 4)
			Move r0  r2
			LoadIntConst r1  4
			MulInt
			Move r3  r0
            
            // led.off += led.inc
            LoadI r0 leds r3 0
            LoadI r1 leds r3 1
            AddFloat
            StoreI leds r3 0 r0
            
            // Check for going past lim (increasing) or below 0 (decreasing)

            // if (led.inc > 0)
            LoadI r0 leds r3 1
            LoadZero r1
            GTFloat
            if
                // if (led.off >= led.lim)
                LoadI r0 leds r3 0
                LoadI r1 leds r3 2
                GTFloat
                if
                    // led.off = led.lim
                    LoadI r0 leds r3 2
                    StoreI leds r3 0 r0
                    
                    //led.inc = - led.inc
                    LoadI r0 leds r3 1
                    NegFloat
                    StoreI leds r3 1 r0
                end
            else
                // if (led.off <= 0)
                LoadI r0 leds r3 0
                LoadZero r1
                LEFloat
                if
                    // We are done with the throb, select a new inc and lim
                    
                    // led.off = 0
                    StoreI leds r3 0 r1
                    
                    // Increment inc value for each step a random amount
                    
                    // led.inc = Random(IncMin, IncMax)
                    Load r0 IncMin
                    Load r1 IncMax
                    RandomFloat
                    StoreI leds r3 1 r0
            
                    // Random number of steps to throb up and down
                    
                    // led.lim = led.inc + Random(stepsMin, stepsMax);
                    Load r0 stepsMin
                    Load r1 stepsMax
                    RandomFloat
                    LoadI r1 leds r3 1
                    AddFloat
                    StoreI leds r3 2 r0
                end
            end
            
            // Multiply val by brightness
            
            // brightness = BrightnessMin + led.off;
            Load r0 BrightnessMin
            LoadI r1 leds r3 0
            AddFloat

            // val = max(_color.val() * brightness, BrightnessMin)
            MoveColor c1 c0
            LoadColorComp r1 c1 2
            MulFloat
            StoreColorComp c1 2 r0
            
            SetLight r2 c1
        end
        
        // return speedDelay
        Load r0 speedDelay
        Exit r0
    end
end

// Pulse: color, speed, depth (5 bytes)
//
// Pulse lights with passed color, dimming at passed
// speed (0-7). Passed depth is amount of dimming.
//
// Depth is how close to BrightnessMin you should get.
//
//      min = c.val - (float(depth + 1) / 8 * (c.val - BrightnessMin))
//
// Speed is computed as number of cycles to go from min to max
//
//      inc = (max - min) / (float(NumLevels - speed) * PulseSpeedMult)


// 0 (slight dimming) to 7 (dimming to 0 brightness)
//
effect p 5
    float state 4 // cur, inc, min, max
    
    init
        LoadColorParam c0 0
        LoadColorComp r0 c0 2
        
        // Keep index in r3
        LoadZero r1
        LoadX r3 state r1 0

        // max = c.val
        StoreIX r3 3 r0
        
        // min = c.val - (float(depth + 1) / 8 * (c.val - BrightnessMin))
        LoadIntParam r0 4
        LoadIntConst r1 1
        AddInt
        ToFloat r0
        Load r1 NumLevels
        ToFloat r1
        DivFloat
        Move r2 r0
        LoadColorComp r0 c0 2
        Load r1 BrightnessMin
        SubFloat
        Move r1 r2
        MulFloat
        Move r1 r0
        LoadColorComp r0 c0 2
        SubFloat
        StoreIX r3 2 r0

        // inc = (max - min) / float((NumLevels - speed) * PulseSpeedMult)
        LoadIX r0 r3 3
        LoadIX r1 r3 2
        SubFloat
        Move r2 r0
        Load r0 NumLevels
        LoadIntParam r1 3
        SubInt
        Load r1 PulseSpeedMult
        MulInt
        ToFloat r0
        Move r1 r0
        Move r0 r2
        DivFloat
        StoreIX r3 1 r0

        // Start with a random value for cur
        LoadIX r0 r3 2
        LoadIX r1 r3 3
        RandomFloat
        StoreIX r3 0 r0
    end
        
    loop
        LoadZero r0
        LoadX r0 state r0 0
        Call animate
        LoadIX r0 r3 0
        StoreColorComp c0 2 r0
        SetAllLights c0
        Load r0 PulseDelay
        Exit r0
    end
end

