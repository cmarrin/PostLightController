// Arly script for different Post Light Controller effects
//

def ColorVal    2
def LEDCur      0
def LEDInc      1
def LEDMin      2
def LEDMax      3
def SpeedTableEntrySize 3

const float IncMin          0.004
const float IncMax          0.04
const float BrightnessMin   0.3
const int LedSize           24
const int NumPixels         8
const int NumLevels         8
const int PulseDelay        25
const int PulseSpeedMult    35

table float FlickerSpeedTable
    0.98 1    40
    0.98 1    30
    0.71 0.94 20
    0.59 0.78 20
    0.27 0.47 20
    0.08 0.31 20
    0.03 0.16 10
    0.01 0.02 10
end

float flickerLeds 32       // cur, inc, min, max
float flickerStepsMin 1
float flickerStepsMax 1
int flickerSpeedDelay 1

float pulseState 4 // cur, inc, min, max


// r0 contains index of structure: cur, inc, min, max
// Animate cur between min and max but adding inc
// Return:  r0 = integer 1 if we just reversed into the positive
//          direction, 0 otherwise
function animate
    Move r3 r0
    
    // r3 has base index
    // r2 has cur
    
    // cur += inc
    LoadIX r0 r3 LEDCur
    LoadIX r1 r3 LEDInc
    AddFloat
    StoreIX r3 LEDCur r0
    Move r2 r0
    
    // if (0 <= inc)
    LoadZero r0
    LEFloat
    if
        // if cur > max
        Move r0 r2
        LoadIX r1 r3 LEDMax
        GTFloat
        if
            // Reverse direction
            StoreIX r3 LEDCur r1
            LoadIX r0 r3 LEDInc
            NegFloat
            StoreIX r3 LEDInc r0
        end
    else
        // if (cur < min)
        Move r0 r2
        LoadIX r1 r3 LEDMin
        LTFloat
        if
            // Reverse direction
            StoreIX r3 LEDCur r1
            LoadIX r0 r3 LEDInc
            NegFloat
            StoreIX r3 LEDInc r0
            LoadIntConst r0 1
            Return
        end
    end
    LoadZero r0
    Return
end

function constantInit
    LoadColorParam c0 0
end

function constantLoop
    SetAllLights c0
    LoadZero r0
    Exit r0
end

function flickerInit
    // Get color param
    LoadColorParam c0 0
    
    // Init leds
    LoadZero r0
    Load r1 LedSize
    Init flickerLeds
    
    // Init min, max and delay from SpeedTable
    LoadIntParam r0 3
    LoadIntConst r1 SpeedTableEntrySize
    MulInt
    LoadI r1 FlickerSpeedTable r0 0
    Store flickerStepsMin r1
    LoadI r1 FlickerSpeedTable r0 1
    Store flickerStepsMax r1
    LoadI r1 FlickerSpeedTable r0 2
    ToInt r1
    Store flickerSpeedDelay r1
end

function flickerLoop
    LoadZero r2
    Load r0 NumPixels
    
    // for (i = 0; i < NumPixels; ++i)
    foreach r2
        // r3 holds the index of the current LED (r2 * 4)
        Move r0 r2
        LoadIntConst r1 4
        MulInt
        Move r3  r0
        
        // led.cur += led.inc
        LoadI r0 flickerLeds r3 LEDCur
        LoadI r1 flickerLeds r3 LEDInc
        AddFloat
        StoreI flickerLeds r3 0 r0
        
        // Check for going past lim (increasing) or below 0 (decreasing)

        // if (led.inc > 0)
        LoadI r0 flickerLeds r3 LEDInc
        LoadZero r1
        GTFloat
        if
            // if (led.off >= led.lim)
            LoadI r0 flickerLeds r3 LEDCur
            LoadI r1 flickerLeds r3 2
            GTFloat
            if
                // led.cur = led.lim
                LoadI r0 flickerLeds r3 2
                StoreI flickerLeds r3 LEDCur r0
                
                //led.inc = - led.inc
                LoadI r0 flickerLeds r3 LEDInc
                NegFloat
                StoreI flickerLeds r3 LEDInc r0
            end
        else
            // if (led.cur <= 0)
            LoadI r0 flickerLeds r3 LEDCur
            LoadZero r1
            LEFloat
            if
                // We are done with the throb, select a new inc and lim
                
                // led.cur = 0
                StoreI flickerLeds r3 LEDCur r1
                
                // Increment inc value for each step a random amount
                
                // led.inc = Random(IncMin, IncMax)
                Load r0 IncMin
                Load r1 IncMax
                RandomFloat
                StoreI flickerLeds r3 LEDInc r0
        
                // Random number of steps to throb up and down
                
                // led.lim = led.inc + Random(flickerStepsMin, flickerStepsMax);
                Load r0 flickerStepsMin
                Load r1 flickerStepsMax
                RandomFloat
                LoadI r1 flickerLeds r3 LEDInc
                AddFloat
                StoreI flickerLeds r3 2 r0
            end
        end
        
        // Multiply val by brightness
        
        // brightness = BrightnessMin + led.cur;
        Load r0 BrightnessMin
        LoadI r1 flickerLeds r3 LEDCur
        AddFloat

        // val = max(_color.val() * brightness, BrightnessMin)
        MoveColor c1 c0
        LoadColorComp r1 c1 ColorVal
        MulFloat
        StoreColorComp c1 ColorVal r0
        
        SetLight r2 c1
    end
    
    // return flickerSpeedDelay
    Load r0 flickerSpeedDelay
    Exit r0
end

function pulseInit
    LoadColorParam c0 0
    LoadColorComp r0 c0 ColorVal
    
    // Keep index in r3
    LoadZero r1
    LoadX r3 pulseState r1 LEDCur

    // max = c.val
    StoreIX r3 LEDMax r0
    
    // min = c.val - (float(depth + 1) / 8 * (c.val - BrightnessMin))
    LoadIntParam r0 4
    LoadIntConst r1 1
    AddInt
    ToFloat r0
    Load r1 NumLevels
    ToFloat r1
    DivFloat
    Move r2 r0
    LoadColorComp r0 c0 ColorVal
    Load r1 BrightnessMin
    SubFloat
    Move r1 r2
    MulFloat
    Move r1 r0
    LoadColorComp r0 c0 ColorVal
    SubFloat
    StoreIX r3 LEDMin r0

    // inc = (max - min) / float((NumLevels - speed) * PulseSpeedMult)
    LoadIX r0 r3 LEDMax
    LoadIX r1 r3 LEDMin
    SubFloat
    Move r2 r0
    Load r0 NumLevels
    LoadIntParam r1 3
    SubInt
    Load r1 PulseSpeedMult
    MulInt
    ToFloat r0
    Move r1 r0
    Move r0 r2
    DivFloat
    StoreIX r3 LEDInc r0

    // Start with a random value for cur
    LoadIX r0 r3 LEDMin
    LoadIX r1 r3 LEDMax
    RandomFloat
    StoreIX r3 LEDCur r0
end

function pulseLoop
    LoadZero r0
    LoadX r0 pulseState r0 0
    Call animate
    LoadIX r0 r3 LEDCur
    StoreColorComp c0 ColorVal r0
    SetAllLights c0
    Load r0 PulseDelay
    Exit r0
end

effect c 3 constantInit constantLoop
effect f 4 flickerInit flickerLoop
effect p 5 pulseInit pulseLoop
