// Arly script for different Post Light Controller effects
//

// Total 234 bytes

// 20 bytes
const float IncMin          1
const float IncMax          10
const float BrightnessMin   0.3
const int LedSize           24
const int NumPixels         8
const int NumLevels         8
const int PulseDelay        25
const int PulseSpeedMult    35

table float FlickerSpeedTable
    250 255 40
    250 255 30
    180 240 20
    150 200 20
     70 120 20
     20  80 20
      8  40 10
      2   5 10
end

// Constant Color (4 bytes)
effect c 3
    init
        LoadColorParam c0 0
    end
        
    loop
        SetAllLights c0
        LoadZero r0
        Return r0
    end
end

// Flicker (114 bytes)
effect f 4
    float leds 24
    float stepsMin 1
    float stepsMax 1
    int speedDelay 1
    
    init
        // Get color param
        LoadColorParam c0 0
        
        // Init leds
        LoadZero r0
        Load r1 LedSize
        Init leds
        
        // Init min, max and delay from SpeedTable
        LoadIntParam r0 3
        Move r1 r0
        AddInt
        AddInt
        LoadX r1 FlickerSpeedTable r0 0
        Store stepsMin r1
        LoadX r1 FlickerSpeedTable r0 1
        Store stepsMax r1
        LoadX r1 FlickerSpeedTable r0 2
        ToInt r1
        Store speedDelay r1
    end
    
    loop
        LoadZero r2
        Load r0 NumPixels
        
        // for (i = 0; i < NumPixels; ++i)
        foreach r2
			// r3 holds the index of the current LED (r2 * 3)
			Move r0  r2
			Move r1  r2
			AddInt
			AddInt
			Move r3  r0
            
            // led.off += led.inc
            LoadX r0 leds r3 0
            LoadX r1 leds r3 1
            AddFloat
            StoreX leds r3 0 r0
            
            // Check for going past lim (increasing) or below 0 (decreasing)
            LoadX r0 leds r3 1
            LoadZero r1

            // if (led.in > 0)
            GTFloat
            if
                LoadX r0 leds r3 0
                LoadX r1 leds r3 2

                // if (led.off >= led.lim)
                GTFloat
                if
                    // led.off = led.lim
                    LoadX r0 leds r3 2
                    StoreX leds r3 0 r0
                    
                    //led.inc = - led.inc
                    LoadX r0 leds r3 1
                    NegFloat
                    StoreX leds r3 1 r0
                end
            else
                LoadX r0 leds r3 0
                LoadZero r1
                // if (led.off <= 0)
                LEFloat
                if
                    // We are done with the throb, select a new inc and lim
                    
                    // led.off = 0
                    StoreX leds r3 0 r1
                    
                    // Increment inc value for each step a random amount
                    
                    // ld.inc = Random(incMin, incMax)
                    Load r0 IncMin
                    Load r1 IncMax
                    Random
                    StoreX leds r3 1 r0
            
                    // Random number of steps to throb up and down
                    
                    // led.lim = led.inc + Random(stepsMin, stepsMax);
                    Load r0 stepsMin
                    Load r1 stepsMax
                    Random
                    LoadX r1 leds r3 1
                    AddFloat
                    StoreX leds r3 2 r0
                end
            end
            
            // Multiply val by brightness
            
            // brightness = BrightnessMin + (led.off / 255);
            LoadX r0 leds r3 0
            LoadByteMax r1
            ToFloat r1
            DivFloat
            Load r1 BrightnessMin
            AddFloat

            // val = max(_color.val() * brightness, BrightnessMin)
            MoveColor c1 c0
            LoadVal r1 c1
            MulFloat
            StoreVal c1 r0
            
            SetLight r2 c1
        end
        
        // return speedDelay
        Load r0 speedDelay
        Return r0
    end
end

// Pulse: color, speed, depth (5 bytes)
//
// Pulse lights with passed color, dimming at passed
// speed (0-7). Passed depth is amount of dimming.
//
// Depth is how close to BrightnessMin you should get.
//
//      min = c.val - (float(depth + 1) / 8 * (c.val - BrightnessMin))
//
// Speed is computed as number of cycles to go from min to max
//
//      inc = (max - min) / (float(NumLevels - speed) * PulseSpeedMult)


// 0 (slight dimming) to 7 (dimming to 0 brightness)
//
effect p 5
    float inc 1
    float cur 1
    float min 1
    float max 1
    int increasing 1
    
    init
        LoadZero r0
        Store increasing r0
        
        LoadColorParam c0 0
        LoadVal r0 c0
        Store cur r0
        Store max r0
        
        // min = c.val - (float(depth + 1) / 8 * (c.val - BrightnessMin))
        LoadIntParam r0 4
        LoadIntOne r1
        AddInt
        ToFloat r0
        Load r1 NumLevels
        ToFloat r1
        DivFloat
        Move r2 r0
        Load r0 cur
        Load r1 ValMin
        SubFloat
        Move r1 r2
        MulFloat
        Move r1 r0
        Load r0 cur
        SubFloat
        Store min r0

        // inc = (max - min) / float((NumLevels - speed) * PulseSpeedMult)
        Load r0 max
        Load r1 min
        SubFloat
        Move r2 r0
        Load r0 NumLevels
        LoadIntParam r1 3
        SubInt
        Load r1 PulseSpeedMult
        MulInt
        ToFloat r0
        Move r1 r0
        Move r0 r2
        DivFloat
        Store inc r0
    end
        
    loop
        Load r0 increasing
        if
            Load r0 cur
            Load r1 inc
            AddFloat
            Move r3 r0
            Load r1 max
            GEFloat
            if
                LoadZero r0
                Store increasing r0
                Load r3 cur
            end
        else
            Load r0 cur
            Load r1 inc
            SubFloat
            Move r3 r0
            Load r1 min
            LEFloat
            if
                LoadIntOne r0
                Store increasing r0
                Load r3 cur
            end
        end
        
        Store cur r3
        StoreVal c0 r3
        SetAllLights c0
        Load r0 PulseDelay
        Return r0
    end
end

