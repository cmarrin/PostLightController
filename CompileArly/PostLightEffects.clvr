// Arly script for different Post Light Controller effects
//

def ColorVal    2
def LEDCur      0
def LEDInc      1
def LEDMin      2
def LEDMax      3
def SpeedTableEntrySize 3

struct FlickerSpeedEntry
{
    float min;
    float max;
    int delay;
}

struct LedEntry
{
    float cur;
    float inc;
    float min;
    float max;
}

const float IncMin          0.004
const float IncMax          0.04
const float BrightnessMin   0.3
const int LedSize           24
const int NumPixels         8
const int NumLevels         8
const int PulseDelay        25
const int PulseSpeedMult    35

table FlickerSpeedEntry FlickerSpeedTable
    0.98 1    40
    0.98 1    30
    0.71 0.94 20
    0.59 0.78 20
    0.27 0.47 20
    0.08 0.31 20
    0.03 0.16 10
    0.01 0.02 10
end

var LedEntry leds 8

LedEntry* led
int i

// Animate cur between min and max but adding inc
// Return: 1 if we just reversed into the positive
//         direction, 0 otherwise
function animate(led)
{
    led.cur += led.inc;
    if (led.inc > 0) {
        if (led.cur >= led.max) {
            led.cur = led.max;
            led.inc = -led.inc;
        }
    } else {
        if (led.cur <= led.min) {
            led.cur = led.min;
            led.inc = -led.inc;
            return 1;
        }
    }
    return 0;
}

function constantInit()
{
    c0 = Params[0];
}

function constantLoop()
{
    SetAllLights(c0);
    exit 0;
}

function flickerInit()
{
    c0 = Params[0];
    Init(leds, 0, LedSize * 4);
}

function flickerLoop()
{
    i = 0;
    foreach (i : NumPixels) {
        led = &leds[i];
        if (animate(led)) {
            // We are done with the throb, select a new inc and lim
            // Increment inc value for each step a random amount
            led.cur = BrightnessMin;
            led.inc = Random(IncMin, IncMax);
        
            // Random number of steps to throb up and down
            led.min = BrightnessMin;
            led.max = led.inc + Random(FlickerSpeedTable[i].min, FlickerSpeedTable[i].max);
        }

        c0.val = led.cur;
        SetLight(i, c0);
    }
    
    return FlickerSpeedTable[i].delay;
}

function pulseInit()
{
    c0 = Params[0];
    led = &leds[0];
    
    led.max = c0.val;
    led.min = c0.val - (float(Params[4] + 1) / 8 * (c0.val - BrightnessMin))
    led.inc = (led.max - led.min) / float((NumLevels - Params[3]) * PulseSpeedMult)

    // Start with a random value for cur
    led.cur = Random(led.min, led.max);
}

function pulseLoop()
{
    animate(&leds[0]);

    led = &leds[0];
    c0.val = led.cur;
    SetAllLights(c0);
    exit PulseDelay;
}

effect c 3 constantInit constantLoop
effect f 4 flickerInit flickerLoop
effect p 5 pulseInit pulseLoop
